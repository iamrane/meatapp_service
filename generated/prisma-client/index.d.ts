// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  meat: (where?: MeatWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  meat: (where: MeatWhereUniqueInput) => MeatNullablePromise;
  meats: (args?: {
    where?: MeatWhereInput;
    orderBy?: MeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meat>;
  meatsConnection: (args?: {
    where?: MeatWhereInput;
    orderBy?: MeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeatConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMeat: (data: MeatCreateInput) => MeatPromise;
  updateMeat: (args: {
    data: MeatUpdateInput;
    where: MeatWhereUniqueInput;
  }) => MeatPromise;
  updateManyMeats: (args: {
    data: MeatUpdateManyMutationInput;
    where?: MeatWhereInput;
  }) => BatchPayloadPromise;
  upsertMeat: (args: {
    where: MeatWhereUniqueInput;
    create: MeatCreateInput;
    update: MeatUpdateInput;
  }) => MeatPromise;
  deleteMeat: (where: MeatWhereUniqueInput) => MeatPromise;
  deleteManyMeats: (where?: MeatWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  meat: (
    where?: MeatSubscriptionWhereInput
  ) => MeatSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MeatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "meatName_ASC"
  | "meatName_DESC"
  | "tags_ASC"
  | "tags_DESC"
  | "shortDescription_ASC"
  | "shortDescription_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "fry_ASC"
  | "fry_DESC"
  | "roast_ASC"
  | "roast_DESC"
  | "stew_ASC"
  | "stew_DESC"
  | "grill_ASC"
  | "grill_DESC"
  | "marbling_ASC"
  | "marbling_DESC"
  | "tenderness_ASC"
  | "tenderness_DESC"
  | "rare_ASC"
  | "rare_DESC"
  | "medium_ASC"
  | "medium_DESC"
  | "wellDone_ASC"
  | "wellDone_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MeatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MeatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  meatName?: Maybe<String>;
  meatName_not?: Maybe<String>;
  meatName_in?: Maybe<String[] | String>;
  meatName_not_in?: Maybe<String[] | String>;
  meatName_lt?: Maybe<String>;
  meatName_lte?: Maybe<String>;
  meatName_gt?: Maybe<String>;
  meatName_gte?: Maybe<String>;
  meatName_contains?: Maybe<String>;
  meatName_not_contains?: Maybe<String>;
  meatName_starts_with?: Maybe<String>;
  meatName_not_starts_with?: Maybe<String>;
  meatName_ends_with?: Maybe<String>;
  meatName_not_ends_with?: Maybe<String>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  shortDescription?: Maybe<String>;
  shortDescription_not?: Maybe<String>;
  shortDescription_in?: Maybe<String[] | String>;
  shortDescription_not_in?: Maybe<String[] | String>;
  shortDescription_lt?: Maybe<String>;
  shortDescription_lte?: Maybe<String>;
  shortDescription_gt?: Maybe<String>;
  shortDescription_gte?: Maybe<String>;
  shortDescription_contains?: Maybe<String>;
  shortDescription_not_contains?: Maybe<String>;
  shortDescription_starts_with?: Maybe<String>;
  shortDescription_not_starts_with?: Maybe<String>;
  shortDescription_ends_with?: Maybe<String>;
  shortDescription_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  fry?: Maybe<String>;
  fry_not?: Maybe<String>;
  fry_in?: Maybe<String[] | String>;
  fry_not_in?: Maybe<String[] | String>;
  fry_lt?: Maybe<String>;
  fry_lte?: Maybe<String>;
  fry_gt?: Maybe<String>;
  fry_gte?: Maybe<String>;
  fry_contains?: Maybe<String>;
  fry_not_contains?: Maybe<String>;
  fry_starts_with?: Maybe<String>;
  fry_not_starts_with?: Maybe<String>;
  fry_ends_with?: Maybe<String>;
  fry_not_ends_with?: Maybe<String>;
  roast?: Maybe<String>;
  roast_not?: Maybe<String>;
  roast_in?: Maybe<String[] | String>;
  roast_not_in?: Maybe<String[] | String>;
  roast_lt?: Maybe<String>;
  roast_lte?: Maybe<String>;
  roast_gt?: Maybe<String>;
  roast_gte?: Maybe<String>;
  roast_contains?: Maybe<String>;
  roast_not_contains?: Maybe<String>;
  roast_starts_with?: Maybe<String>;
  roast_not_starts_with?: Maybe<String>;
  roast_ends_with?: Maybe<String>;
  roast_not_ends_with?: Maybe<String>;
  stew?: Maybe<String>;
  stew_not?: Maybe<String>;
  stew_in?: Maybe<String[] | String>;
  stew_not_in?: Maybe<String[] | String>;
  stew_lt?: Maybe<String>;
  stew_lte?: Maybe<String>;
  stew_gt?: Maybe<String>;
  stew_gte?: Maybe<String>;
  stew_contains?: Maybe<String>;
  stew_not_contains?: Maybe<String>;
  stew_starts_with?: Maybe<String>;
  stew_not_starts_with?: Maybe<String>;
  stew_ends_with?: Maybe<String>;
  stew_not_ends_with?: Maybe<String>;
  grill?: Maybe<String>;
  grill_not?: Maybe<String>;
  grill_in?: Maybe<String[] | String>;
  grill_not_in?: Maybe<String[] | String>;
  grill_lt?: Maybe<String>;
  grill_lte?: Maybe<String>;
  grill_gt?: Maybe<String>;
  grill_gte?: Maybe<String>;
  grill_contains?: Maybe<String>;
  grill_not_contains?: Maybe<String>;
  grill_starts_with?: Maybe<String>;
  grill_not_starts_with?: Maybe<String>;
  grill_ends_with?: Maybe<String>;
  grill_not_ends_with?: Maybe<String>;
  marbling?: Maybe<Float>;
  marbling_not?: Maybe<Float>;
  marbling_in?: Maybe<Float[] | Float>;
  marbling_not_in?: Maybe<Float[] | Float>;
  marbling_lt?: Maybe<Float>;
  marbling_lte?: Maybe<Float>;
  marbling_gt?: Maybe<Float>;
  marbling_gte?: Maybe<Float>;
  tenderness?: Maybe<Float>;
  tenderness_not?: Maybe<Float>;
  tenderness_in?: Maybe<Float[] | Float>;
  tenderness_not_in?: Maybe<Float[] | Float>;
  tenderness_lt?: Maybe<Float>;
  tenderness_lte?: Maybe<Float>;
  tenderness_gt?: Maybe<Float>;
  tenderness_gte?: Maybe<Float>;
  rare?: Maybe<Int>;
  rare_not?: Maybe<Int>;
  rare_in?: Maybe<Int[] | Int>;
  rare_not_in?: Maybe<Int[] | Int>;
  rare_lt?: Maybe<Int>;
  rare_lte?: Maybe<Int>;
  rare_gt?: Maybe<Int>;
  rare_gte?: Maybe<Int>;
  medium?: Maybe<Int>;
  medium_not?: Maybe<Int>;
  medium_in?: Maybe<Int[] | Int>;
  medium_not_in?: Maybe<Int[] | Int>;
  medium_lt?: Maybe<Int>;
  medium_lte?: Maybe<Int>;
  medium_gt?: Maybe<Int>;
  medium_gte?: Maybe<Int>;
  wellDone?: Maybe<Int>;
  wellDone_not?: Maybe<Int>;
  wellDone_in?: Maybe<Int[] | Int>;
  wellDone_not_in?: Maybe<Int[] | Int>;
  wellDone_lt?: Maybe<Int>;
  wellDone_lte?: Maybe<Int>;
  wellDone_gt?: Maybe<Int>;
  wellDone_gte?: Maybe<Int>;
  AND?: Maybe<MeatWhereInput[] | MeatWhereInput>;
  OR?: Maybe<MeatWhereInput[] | MeatWhereInput>;
  NOT?: Maybe<MeatWhereInput[] | MeatWhereInput>;
}

export interface MeatCreateInput {
  id?: Maybe<ID_Input>;
  meatName: String;
  tags: String;
  shortDescription: String;
  slug: String;
  fry: String;
  roast: String;
  stew: String;
  grill: String;
  marbling?: Maybe<Float>;
  tenderness?: Maybe<Float>;
  rare?: Maybe<Int>;
  medium?: Maybe<Int>;
  wellDone?: Maybe<Int>;
}

export interface MeatUpdateInput {
  meatName?: Maybe<String>;
  tags?: Maybe<String>;
  shortDescription?: Maybe<String>;
  slug?: Maybe<String>;
  fry?: Maybe<String>;
  roast?: Maybe<String>;
  stew?: Maybe<String>;
  grill?: Maybe<String>;
  marbling?: Maybe<Float>;
  tenderness?: Maybe<Float>;
  rare?: Maybe<Int>;
  medium?: Maybe<Int>;
  wellDone?: Maybe<Int>;
}

export interface MeatUpdateManyMutationInput {
  meatName?: Maybe<String>;
  tags?: Maybe<String>;
  shortDescription?: Maybe<String>;
  slug?: Maybe<String>;
  fry?: Maybe<String>;
  roast?: Maybe<String>;
  stew?: Maybe<String>;
  grill?: Maybe<String>;
  marbling?: Maybe<Float>;
  tenderness?: Maybe<Float>;
  rare?: Maybe<Int>;
  medium?: Maybe<Int>;
  wellDone?: Maybe<Int>;
}

export interface MeatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MeatWhereInput>;
  AND?: Maybe<MeatSubscriptionWhereInput[] | MeatSubscriptionWhereInput>;
  OR?: Maybe<MeatSubscriptionWhereInput[] | MeatSubscriptionWhereInput>;
  NOT?: Maybe<MeatSubscriptionWhereInput[] | MeatSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Meat {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  meatName: String;
  tags: String;
  shortDescription: String;
  slug: String;
  fry: String;
  roast: String;
  stew: String;
  grill: String;
  marbling?: Float;
  tenderness?: Float;
  rare?: Int;
  medium?: Int;
  wellDone?: Int;
}

export interface MeatPromise extends Promise<Meat>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  meatName: () => Promise<String>;
  tags: () => Promise<String>;
  shortDescription: () => Promise<String>;
  slug: () => Promise<String>;
  fry: () => Promise<String>;
  roast: () => Promise<String>;
  stew: () => Promise<String>;
  grill: () => Promise<String>;
  marbling: () => Promise<Float>;
  tenderness: () => Promise<Float>;
  rare: () => Promise<Int>;
  medium: () => Promise<Int>;
  wellDone: () => Promise<Int>;
}

export interface MeatSubscription
  extends Promise<AsyncIterator<Meat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  meatName: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  shortDescription: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  fry: () => Promise<AsyncIterator<String>>;
  roast: () => Promise<AsyncIterator<String>>;
  stew: () => Promise<AsyncIterator<String>>;
  grill: () => Promise<AsyncIterator<String>>;
  marbling: () => Promise<AsyncIterator<Float>>;
  tenderness: () => Promise<AsyncIterator<Float>>;
  rare: () => Promise<AsyncIterator<Int>>;
  medium: () => Promise<AsyncIterator<Int>>;
  wellDone: () => Promise<AsyncIterator<Int>>;
}

export interface MeatNullablePromise
  extends Promise<Meat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  meatName: () => Promise<String>;
  tags: () => Promise<String>;
  shortDescription: () => Promise<String>;
  slug: () => Promise<String>;
  fry: () => Promise<String>;
  roast: () => Promise<String>;
  stew: () => Promise<String>;
  grill: () => Promise<String>;
  marbling: () => Promise<Float>;
  tenderness: () => Promise<Float>;
  rare: () => Promise<Int>;
  medium: () => Promise<Int>;
  wellDone: () => Promise<Int>;
}

export interface MeatConnection {
  pageInfo: PageInfo;
  edges: MeatEdge[];
}

export interface MeatConnectionPromise
  extends Promise<MeatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeatEdge>>() => T;
  aggregate: <T = AggregateMeatPromise>() => T;
}

export interface MeatConnectionSubscription
  extends Promise<AsyncIterator<MeatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeatSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MeatEdge {
  node: Meat;
  cursor: String;
}

export interface MeatEdgePromise extends Promise<MeatEdge>, Fragmentable {
  node: <T = MeatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeatEdgeSubscription
  extends Promise<AsyncIterator<MeatEdge>>,
    Fragmentable {
  node: <T = MeatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMeat {
  count: Int;
}

export interface AggregateMeatPromise
  extends Promise<AggregateMeat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeatSubscription
  extends Promise<AsyncIterator<AggregateMeat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MeatSubscriptionPayload {
  mutation: MutationType;
  node: Meat;
  updatedFields: String[];
  previousValues: MeatPreviousValues;
}

export interface MeatSubscriptionPayloadPromise
  extends Promise<MeatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeatPreviousValuesPromise>() => T;
}

export interface MeatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeatPreviousValuesSubscription>() => T;
}

export interface MeatPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  meatName: String;
  tags: String;
  shortDescription: String;
  slug: String;
  fry: String;
  roast: String;
  stew: String;
  grill: String;
  marbling?: Float;
  tenderness?: Float;
  rare?: Int;
  medium?: Int;
  wellDone?: Int;
}

export interface MeatPreviousValuesPromise
  extends Promise<MeatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  meatName: () => Promise<String>;
  tags: () => Promise<String>;
  shortDescription: () => Promise<String>;
  slug: () => Promise<String>;
  fry: () => Promise<String>;
  roast: () => Promise<String>;
  stew: () => Promise<String>;
  grill: () => Promise<String>;
  marbling: () => Promise<Float>;
  tenderness: () => Promise<Float>;
  rare: () => Promise<Int>;
  medium: () => Promise<Int>;
  wellDone: () => Promise<Int>;
}

export interface MeatPreviousValuesSubscription
  extends Promise<AsyncIterator<MeatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  meatName: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  shortDescription: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  fry: () => Promise<AsyncIterator<String>>;
  roast: () => Promise<AsyncIterator<String>>;
  stew: () => Promise<AsyncIterator<String>>;
  grill: () => Promise<AsyncIterator<String>>;
  marbling: () => Promise<AsyncIterator<Float>>;
  tenderness: () => Promise<AsyncIterator<Float>>;
  rare: () => Promise<AsyncIterator<Int>>;
  medium: () => Promise<AsyncIterator<Int>>;
  wellDone: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Meat",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
