module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMeat {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Meat {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  meatName: String!
  tags: String!
  shortDescription: String!
  slug: String!
  fry: String!
  roast: String!
  stew: String!
  grill: String!
  marbling: Float
  tenderness: Float
  rare: Int
  medium: Int
  wellDone: Int
}

type MeatConnection {
  pageInfo: PageInfo!
  edges: [MeatEdge]!
  aggregate: AggregateMeat!
}

input MeatCreateInput {
  id: ID
  meatName: String!
  tags: String!
  shortDescription: String!
  slug: String!
  fry: String!
  roast: String!
  stew: String!
  grill: String!
  marbling: Float
  tenderness: Float
  rare: Int
  medium: Int
  wellDone: Int
}

type MeatEdge {
  node: Meat!
  cursor: String!
}

enum MeatOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  meatName_ASC
  meatName_DESC
  tags_ASC
  tags_DESC
  shortDescription_ASC
  shortDescription_DESC
  slug_ASC
  slug_DESC
  fry_ASC
  fry_DESC
  roast_ASC
  roast_DESC
  stew_ASC
  stew_DESC
  grill_ASC
  grill_DESC
  marbling_ASC
  marbling_DESC
  tenderness_ASC
  tenderness_DESC
  rare_ASC
  rare_DESC
  medium_ASC
  medium_DESC
  wellDone_ASC
  wellDone_DESC
}

type MeatPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  meatName: String!
  tags: String!
  shortDescription: String!
  slug: String!
  fry: String!
  roast: String!
  stew: String!
  grill: String!
  marbling: Float
  tenderness: Float
  rare: Int
  medium: Int
  wellDone: Int
}

type MeatSubscriptionPayload {
  mutation: MutationType!
  node: Meat
  updatedFields: [String!]
  previousValues: MeatPreviousValues
}

input MeatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MeatWhereInput
  AND: [MeatSubscriptionWhereInput!]
  OR: [MeatSubscriptionWhereInput!]
  NOT: [MeatSubscriptionWhereInput!]
}

input MeatUpdateInput {
  meatName: String
  tags: String
  shortDescription: String
  slug: String
  fry: String
  roast: String
  stew: String
  grill: String
  marbling: Float
  tenderness: Float
  rare: Int
  medium: Int
  wellDone: Int
}

input MeatUpdateManyMutationInput {
  meatName: String
  tags: String
  shortDescription: String
  slug: String
  fry: String
  roast: String
  stew: String
  grill: String
  marbling: Float
  tenderness: Float
  rare: Int
  medium: Int
  wellDone: Int
}

input MeatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  meatName: String
  meatName_not: String
  meatName_in: [String!]
  meatName_not_in: [String!]
  meatName_lt: String
  meatName_lte: String
  meatName_gt: String
  meatName_gte: String
  meatName_contains: String
  meatName_not_contains: String
  meatName_starts_with: String
  meatName_not_starts_with: String
  meatName_ends_with: String
  meatName_not_ends_with: String
  tags: String
  tags_not: String
  tags_in: [String!]
  tags_not_in: [String!]
  tags_lt: String
  tags_lte: String
  tags_gt: String
  tags_gte: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String!]
  shortDescription_not_in: [String!]
  shortDescription_lt: String
  shortDescription_lte: String
  shortDescription_gt: String
  shortDescription_gte: String
  shortDescription_contains: String
  shortDescription_not_contains: String
  shortDescription_starts_with: String
  shortDescription_not_starts_with: String
  shortDescription_ends_with: String
  shortDescription_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  fry: String
  fry_not: String
  fry_in: [String!]
  fry_not_in: [String!]
  fry_lt: String
  fry_lte: String
  fry_gt: String
  fry_gte: String
  fry_contains: String
  fry_not_contains: String
  fry_starts_with: String
  fry_not_starts_with: String
  fry_ends_with: String
  fry_not_ends_with: String
  roast: String
  roast_not: String
  roast_in: [String!]
  roast_not_in: [String!]
  roast_lt: String
  roast_lte: String
  roast_gt: String
  roast_gte: String
  roast_contains: String
  roast_not_contains: String
  roast_starts_with: String
  roast_not_starts_with: String
  roast_ends_with: String
  roast_not_ends_with: String
  stew: String
  stew_not: String
  stew_in: [String!]
  stew_not_in: [String!]
  stew_lt: String
  stew_lte: String
  stew_gt: String
  stew_gte: String
  stew_contains: String
  stew_not_contains: String
  stew_starts_with: String
  stew_not_starts_with: String
  stew_ends_with: String
  stew_not_ends_with: String
  grill: String
  grill_not: String
  grill_in: [String!]
  grill_not_in: [String!]
  grill_lt: String
  grill_lte: String
  grill_gt: String
  grill_gte: String
  grill_contains: String
  grill_not_contains: String
  grill_starts_with: String
  grill_not_starts_with: String
  grill_ends_with: String
  grill_not_ends_with: String
  marbling: Float
  marbling_not: Float
  marbling_in: [Float!]
  marbling_not_in: [Float!]
  marbling_lt: Float
  marbling_lte: Float
  marbling_gt: Float
  marbling_gte: Float
  tenderness: Float
  tenderness_not: Float
  tenderness_in: [Float!]
  tenderness_not_in: [Float!]
  tenderness_lt: Float
  tenderness_lte: Float
  tenderness_gt: Float
  tenderness_gte: Float
  rare: Int
  rare_not: Int
  rare_in: [Int!]
  rare_not_in: [Int!]
  rare_lt: Int
  rare_lte: Int
  rare_gt: Int
  rare_gte: Int
  medium: Int
  medium_not: Int
  medium_in: [Int!]
  medium_not_in: [Int!]
  medium_lt: Int
  medium_lte: Int
  medium_gt: Int
  medium_gte: Int
  wellDone: Int
  wellDone_not: Int
  wellDone_in: [Int!]
  wellDone_not_in: [Int!]
  wellDone_lt: Int
  wellDone_lte: Int
  wellDone_gt: Int
  wellDone_gte: Int
  AND: [MeatWhereInput!]
  OR: [MeatWhereInput!]
  NOT: [MeatWhereInput!]
}

input MeatWhereUniqueInput {
  id: ID
}

type Mutation {
  createMeat(data: MeatCreateInput!): Meat!
  updateMeat(data: MeatUpdateInput!, where: MeatWhereUniqueInput!): Meat
  updateManyMeats(data: MeatUpdateManyMutationInput!, where: MeatWhereInput): BatchPayload!
  upsertMeat(where: MeatWhereUniqueInput!, create: MeatCreateInput!, update: MeatUpdateInput!): Meat!
  deleteMeat(where: MeatWhereUniqueInput!): Meat
  deleteManyMeats(where: MeatWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  meat(where: MeatWhereUniqueInput!): Meat
  meats(where: MeatWhereInput, orderBy: MeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meat]!
  meatsConnection(where: MeatWhereInput, orderBy: MeatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MeatConnection!
  node(id: ID!): Node
}

type Subscription {
  meat(where: MeatSubscriptionWhereInput): MeatSubscriptionPayload
}
`
      }
    